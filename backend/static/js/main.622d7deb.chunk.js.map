{"version":3,"sources":["classifier/index.jsx","App.js","index.js"],"names":["Classifier","canvasRef","useRef","imageRef","videoRef","useState","result","setResult","useEffect","a","navigator","mediaDevices","getUserMedia","audio","video","stream","current","srcObject","getCameraStream","interval","setInterval","captureImageFromCamera","formData","FormData","append","fetch","method","body","response","status","text","clearInterval","context","getContext","videoWidth","videoHeight","width","height","drawImage","toBlob","blob","ref","onCanPlay","play","id","hidden","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAkFeA,EAhFI,WACjB,IAAMC,EAAYC,mBACZC,EAAWD,mBACXE,EAAWF,mBAEjB,EAA4BG,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACuBC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,IAHX,OACQC,EADR,OAMMX,EAASY,UACXZ,EAASY,QAAQC,UAAYF,GAPjC,4CADc,uBAAC,WAAD,wBAYdG,KACC,IAEHV,qBAAU,WACR,IAAMW,EAAWC,YAAW,sBAAC,gCAAAX,EAAA,yDAC3BY,KAEIlB,EAASa,QAHc,wBAInBM,EAAW,IAAIC,UACZC,OAAO,QAASrB,EAASa,SALT,SAOFS,MAAM,YAAa,CACxCC,OAAQ,OACRC,KAAML,IATiB,UAYD,OALlBM,EAPmB,QAYZC,OAZY,kCAaJD,EAASE,OAbL,QAajBA,EAbiB,OAcvBvB,EAAUuB,GAda,wBAgBvBvB,EAAU,mBAhBa,4CAmB1B,KACH,OAAO,kBAAMwB,cAAcZ,MAC1B,IAEH,IAMME,EAAyB,WAC7B,IAAMW,EAAU/B,EAAUe,QAAQiB,WAAW,MAC7C,EAAoC7B,EAASY,QAArCkB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpBlC,EAAUe,QAAQoB,MAAQF,EAC1BjC,EAAUe,QAAQqB,OAASF,EAE3BH,EAAQM,UAAUlC,EAASY,QAAS,EAAG,EAAGkB,EAAYC,GAEtDlC,EAAUe,QAAQuB,QAAO,SAACC,GACxBrC,EAASa,QAAUwB,MAIvB,OACE,qCACE,iCACE,oDAEF,iCACE,uBAAOC,IAAKrC,EAAUsC,UAAW,WAzBjCtC,EAASY,SACXZ,EAASY,QAAQ2B,QAwB4CC,GAAG,UAC9D,wBAAQH,IAAKxC,EAAW4C,QAAM,IAC9B,mDAAsBvC,YCjEfwC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.622d7deb.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst Classifier = () => {\n  const canvasRef = useRef();\n  const imageRef = useRef();\n  const videoRef = useRef();\n\n  const [result, setResult] = useState(\"\");\n\n  useEffect(() => {\n    async function getCameraStream() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: true,\n      });\n  \n      if (videoRef.current) {      \n        videoRef.current.srcObject = stream;\n      }\n    };\n  \n    getCameraStream();\n  }, []);\n  \n  useEffect(() => {\n    const interval = setInterval(async () => {\n      captureImageFromCamera();\n\n      if (imageRef.current) {\n        const formData = new FormData();\n        formData.append('image', imageRef.current);\n\n        const response = await fetch('/classify', {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (response.status === 200) {\n          const text = await response.text();\n          setResult(text);\n        } else {\n          setResult(\"Error from API.\");\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const playCameraStream = () => {\n    if (videoRef.current) {\n      videoRef.current.play();\n    }\n  };\n\n  const captureImageFromCamera = () => {\n    const context = canvasRef.current.getContext('2d');\n    const { videoWidth, videoHeight } = videoRef.current;\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    context.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\n\n    canvasRef.current.toBlob((blob) => {\n      imageRef.current = blob;\n    })\n  };\n\n  return (\n    <>\n      <header>\n        <h1>Image classifier</h1>\n      </header>\n      <main>\n        <video ref={videoRef} onCanPlay={() => playCameraStream()} id=\"video\" />\n        <canvas ref={canvasRef} hidden></canvas>\n        <p>Currently seeing: {result}</p>\n      </main>\n    </>\n  )\n};\n\nexport default Classifier;","import './App.css';\nimport Classifier from './classifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Classifier />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}